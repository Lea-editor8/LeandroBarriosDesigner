---
/*
  ModalProject.astro
  Uso: Componente listo para Astro con comportamiento mínimo en JS.
  - Importar y usar <ModalProject /> en tus páginas.
  - Se abre desde un botón de trigger dentro del componente.
  - Requiere TailwindCSS.
*/
---

<!-- Trigger -->
<button
  id="open-modal"
  class="inline-block px-4 py-2 bg-green-600 text-white rounded shadow hover:bg-green-700 cursor-pointer"
  aria-haspopup="dialog"
  aria-controls="project-modal"
  aria-expanded="false"
>
  Ver proyecto
</button>

<!-- Modal -->
<div
  id="project-modal"
  class="fixed inset-0 z-50 hidden items-center justify-center p-4"
  role="dialog"
  aria-modal="true"
  aria-hidden="true"
>
  <!-- Fondo -->
  <div class="absolute inset-0 bg-black/70 backdrop-blur-sm" data-modal-backdrop></div>

  <!-- Contenido -->
  <div
    class="relative max-w-4xl w-full mx-auto bg-white dark:bg-gray-900 rounded-lg shadow-lg overflow-hidden transform transition-transform scale-95"
    tabindex="-1"
  >
    <!-- Imagen -->
    <img
      src="/imagenes/marca-programa-elegi-lujan.jpg"
      alt="Programa Elegí Luján"
      class="w-full h-auto object-cover"
    />

    <!-- Texto -->
    <div class="p-6">
      <h3 class="text-2xl font-semibold mb-2">Programa "Elegí Luján" (2022)</h3>
      <p class="text-gray-600 dark:text-gray-300">
        Diseño de marca y piezas gráficas para el programa Elegí Luján, que impulsa la producción local y promueve el consumo de productos elaborados en el partido de Luján.
      </p>
    </div>

    <!-- Cerrar -->
    <button
      class="absolute top-4 right-4 bg-white text-black rounded-full w-10 h-10 flex items-center justify-center shadow hover:bg-gray-100"
      aria-label="Cerrar modal"
      data-modal-close
    >
      ✕
    </button>
  </div>
</div>

<script is:inline>
  const openBtn = document.getElementById('open-modal');
  const modal = document.getElementById('project-modal');
  const closeBtn = modal.querySelector('[data-modal-close]');
  const backdrop = modal.querySelector('[data-modal-backdrop]');

  function openModal() {
    modal.classList.remove('hidden');
    void modal.offsetWidth;
    modal.style.opacity = '1';
    modal.style.pointerEvents = 'auto';
    modal.querySelector('[tabindex]')?.focus();
    openBtn.setAttribute('aria-expanded', 'true');
    modal.setAttribute('aria-hidden', 'false');
  }

  function closeModal() {
    modal.style.opacity = '';
    modal.style.pointerEvents = '';
    modal.classList.add('hidden');
    openBtn.focus();
    openBtn.setAttribute('aria-expanded', 'false');
    modal.setAttribute('aria-hidden', 'true');
  }

  openBtn?.addEventListener('click', (e) => {
    e.preventDefault();
    openModal();
  });

  closeBtn?.addEventListener('click', (e) => {
    e.preventDefault();
    closeModal();
  });

  backdrop?.addEventListener('click', (e) => {
    if (e.target === backdrop) closeModal();
  });

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !modal.classList.contains('hidden')) closeModal();
  });

  modal.addEventListener('keydown', (e) => {
    if (e.key !== 'Tab') return;
    const focusable = modal.querySelectorAll('a[href], button:not([disabled]), textarea, input, select, [tabindex]:not([tabindex="-1"])');
    if (focusable.length === 0) return;
    const first = focusable[0];
    const last = focusable[focusable.length - 1];
    if (e.shiftKey && document.activeElement === first) {
      e.preventDefault();
      last.focus();
    } else if (!e.shiftKey && document.activeElement === last) {
      e.preventDefault();
      first.focus();
    }
  });
</script>
